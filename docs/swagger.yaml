basePath: /
definitions:
  request.CommentCreateRequest:
    properties:
      message:
        type: string
      photo_id:
        type: integer
    required:
    - message
    type: object
  request.CommentUpdateRequest:
    properties:
      message:
        type: string
    required:
    - message
    type: object
  request.PhotoCreateRequest:
    properties:
      caption:
        type: string
      photo_url:
        type: string
      title:
        type: string
    required:
    - photo_url
    - title
    type: object
  request.PhotoUpdateRequest:
    properties:
      caption:
        type: string
      photo_url:
        type: string
      title:
        type: string
    required:
    - photo_url
    - title
    type: object
  request.SocialMediaCreateRequest:
    properties:
      name:
        type: string
      social_media_url:
        type: string
    required:
    - name
    - social_media_url
    type: object
  request.SocialMediaUpdateRequest:
    properties:
      name:
        type: string
      social_media_url:
        type: string
    required:
    - name
    - social_media_url
    type: object
  request.UserLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  request.UserRegisterRequest:
    properties:
      age:
        type: integer
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - age
    - email
    - password
    - username
    type: object
  response.ErrorResponse:
    properties:
      code:
        type: integer
      errors: {}
      status:
        type: string
    type: object
  response.SuccessResponse:
    properties:
      data: {}
    type: object
host: localhost:8080
info:
  contact:
    email: nandaliyan.rais@gmail.com
    name: rais
  description: MyGram is a social media application.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  termsOfService: http://swagger.io/terms/
  title: MyGram API
  version: "1.0"
paths:
  /comments:
    get:
      consumes:
      - application/json
      description: Get all comments with authentication user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get all comments
      tags:
      - comments
    post:
      consumes:
      - application/json
      description: Create and store a comment with authentication user
      parameters:
      - description: Add Comment
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/request.CommentCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a comment
      tags:
      - comments
  /comments/{commentId}:
    delete:
      consumes:
      - application/json
      description: Delete a comment by id with authentication user
      parameters:
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a comment
      tags:
      - comments
    get:
      consumes:
      - application/json
      description: Get one comment by id with authentication user
      parameters:
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get one comment
      tags:
      - comments
    put:
      consumes:
      - application/json
      description: Update a comment by id with authentication user
      parameters:
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      - description: Update Comment
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/request.CommentUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a comment
      tags:
      - comments
  /photos:
    get:
      consumes:
      - application/json
      description: Get all photos with authentication user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get all photos
      tags:
      - photos
    post:
      consumes:
      - application/json
      description: Create and store a new photo with authentication user
      parameters:
      - description: Add Photo
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/request.PhotoCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Create a photo
      tags:
      - photos
  /photos/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a photo by id with authentication user
      parameters:
      - description: Photo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a photo
      tags:
      - photos
    get:
      consumes:
      - application/json
      description: Get one photo by id with authentication user
      parameters:
      - description: Photo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get one photo
      tags:
      - photos
    put:
      consumes:
      - application/json
      description: Update a photo by id with authentication user
      parameters:
      - description: Photo ID
        in: path
        name: id
        required: true
        type: integer
      - description: Photo Update Request
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/request.PhotoUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a photo
      tags:
      - photos
  /social-media:
    get:
      consumes:
      - application/json
      description: Get all social media with authentication user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get all social media
      tags:
      - Social media
    post:
      consumes:
      - application/json
      description: Create and store a social media with authentication user
      parameters:
      - description: Add Social Media
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/request.SocialMediaCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Add a social media
      tags:
      - Social media
  /social-media/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a social media by id with authentication user
      parameters:
      - description: Social Media ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Delete a social media
      tags:
      - Social media
    get:
      consumes:
      - application/json
      description: Get one social media by id with authentication user
      parameters:
      - description: Social Media ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Get one social media
      tags:
      - Social media
    put:
      consumes:
      - application/json
      description: Update a social media by id with authentication user
      parameters:
      - description: Social Media ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Social Media
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/request.SocialMediaUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - Bearer: []
      summary: Update a social media
      tags:
      - Social media
  /users/login:
    post:
      consumes:
      - application/json
      description: Authentication a user and retrieve a token
      parameters:
      - description: User Login Request
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/request.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Login a user
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Create and store a new user
      parameters:
      - description: User Register Request
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/request.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Register a user
      tags:
      - users
securityDefinitions:
  Bearer:
    description: Authorization Bearer token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
